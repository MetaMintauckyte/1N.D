#include "mylib.hpp"


//KM --------------------------------------------------------------------------------------------------
void Skaityti(string A[], string B[], int C[], int D[], int E[], int F[], int G[], int H[], int & n); 
//------------------------------------------------------------------------------------------------------


//Sukuriama struktūra
struct irasas { 
    string Vard;
    string Pav;
    int paz[10]={0};
    int egz;
    float Galut=0; 
    double Med;//Galutinis rezultatas float tipo gali būti po kablelio
};



//Funkcija skirta nuskaityti duomenis is failo "data_kursiokai.txt"
void Skaityti(string A[], string B[], int C[], int D[], int E[], int F[], int G[], int H[], int & n) 
{ 
	ifstream K ("data_kursiokai.txt"); 
	K >> n; 
	for (int i = 0; i < n; i++) 
	K >> A[i] >> B[i] >> C[i] >> D[i] >> E[i] >> F[i] >> G[i] >> H[i]; 
	K.close(); 
}       


    
//Funkcija skirta skaičiuoti medianą
void mediana(int pazymiai[]) 
{
    
    int sk=0;                //Skaitiklis. Pažymių kiekis
    
    for (int i=0; i<10; i++) //Indeksas ne didesnis už 10
    {
        if (pazymiai[i]>0)
        {   sk++; }
        if (pazymiai[i]==0) //Sąlyga jei įvedėme pažymį 0 (baigėme rašyti)
        {  pazymiai[i]=0;
           sk--;
           break;            //Nutraukiame ciklą 
            
        }       
    }
    
    //Jei skaitiklis yra lyginis skaičius
    if (sk%2==0) 
    {   float(((pazymiai[sk/2-1])+(pazymiai[(sk/2)]))/2.0);}
    else
    {   pazymiai[(sk/2)];}
    //  endl;
}

//Sugeneruoja atsitiktinius pažymius nuo 1 iki 10
int generavimas() 
{
    srand(time(NULL));
    return rand()%10+1; 
}

void auto_ived_paz(irasas mas[], int i, int visi_paz) // Suvedimo funkcija. Į turimą masyvą mas[] įdedami automatiškai sugeneruoti pažymiai ir egzamino rezultatas
{
    mas[i].egz=generavimas(); //Masyve esantis egzamino rezultatas yra nukreipianas į funkciją void, kur automatiškai generuojami pažymiai nuo 1 iki 10
    for (int x=0; x<visi_paz; x++) //For ciklas
    {
        mas[i].paz[x]=generavimas();
    }
    mas[i].Galut=mas[i].Galut/visi_paz;
    mas[i].Galut=mas[i].Galut*0.4+0.6*mas[i].egz;
}

void ivedimas(irasas mas[], int i) //Funkcija skirta leisti vartotojui suvesti duomenis pačiam
{
    do {
        cout<<"Įveskite studento egzamino pažymį:\n";
        cin>>mas[i].egz;
       // mas[i].Galut = mas[i].Galut+(float)mas[i].paz[sk];
    } 
      while (mas[i].egz<0 || mas[i].egz>10);
    cout<<"Įveskite visus studento pažymius (baigę rašykite '0' ):\n";
    int sk=0; //Skaitiklis. Skaičių kiekis
    
    
    do {
        cout<<"Įveskite studento egzamino pažymį:\n";
        cin>>mas[i].paz[sk];
        if (mas[i].paz[sk]!=0)  { mas[i].Galut = mas[i].Galut+(float)mas[i].paz[sk]; }
        sk++;
    } 
      while (mas[i].paz[sk-1]!=0);  
    sk--; 
    mas[i].Galut=mas[i].Galut/sk;
    mas[i].Galut=mas[i].Galut*0.4+0.6*mas[i].egz;
}

void vard_ived(irasas mas[], int i) //Vardo ir pavardės įvedimo void funkcija
{
    //cout<<"Įveskite studento numeris: " <<i+1<< " duomenis:\n";
    do {
        cout<<"Įveskite studento nr. "<<i+1<<" vardą:\n";
        cin>>mas[i].Vard;
    } while (mas[i].Vard.length()<0 || mas[i].Vard.length()>15); //Studento vardas negali būti ilgesnis nei 15 raidžių arba turėsime pakartoti įvedimą
    do {
        cout<<"Įveskite studento nr. " <<i+1<< " pavardę:\n";
        cin >> mas[i].Pav;
    } while (mas[i].Pav.length()<0 && mas[i].Pav.length()>20); //Studento pavardė negali būti ilgesnė nei 20 raidžių arba turėsime pakartoti įvedimą  
}


//    Abeceliskai rikiuoje masyve
/*void Rikiuoti(string A[], string B[], int C[], int n) 
{ 
	string z; 
	string x; 
	int y, xx, yy, zz, xxx, yyy; 

	for (int i = 0; i<n–1; i++) 
	  for (int j = i+1; j<n; j++) {

	// Dvi simbolių eilutes palygina ir, jeigu reikia, sukeičia vietomis 

    if (A[i] < A[j]) 
	  { 
	x = A[i]; 
	A[i] = A[j]; 
	A[j] = x; 
	y = C[i]; 
	C[i] = C[j]; 
	C[j] = y; 
	z = B[i]; 
	B[i] = B[j]; 
	B[j] = z; 
        xx = D[i];
        D[i] = D[j];
        D[j] = xx;
        yy = E[i];
        E[i] = E[j];
        E[j] = yy;
        zz = F[i];
        F[i] = F[j];
        F[j] = zz;
        xxx = G[i];
        G[i] = G[j];
        G[j] = xxx;
        yyy = H[i];
        H[i] = H[j];
        H[j] = yyy;
	}     
     for (int i = 0; i<n-1; i++){
      cout<<A[i]<<B[i];}
    }
}
*/

void atspausdinti(irasas mas[], int stud_k, string A[], string B[], int C[], int D[], int E[], int F[], int G[], int H[], int n) //Resultato atspausdinimas
{ 
    ofstream R ("DIN_rezultatai.txt");    // skaityti jau uzregistruotus duomenis is duomenu bases (doumenu failo.)
    R << "NB!  Nuskaitome anksciau uzregistruotus duomenis is duomenu bazes.\n" << endl; 
    R << setw(10)<<left<<"Vardas";
    R << setw(15)<<left<<"Pavarde";
    R << setw(4)<<left<<"ND1";
    R << setw(4)<<left<<"ND2";
    R << setw(4)<<left<<"ND3";
    R << setw(4)<<left<<"ND4";
    R << setw(4)<<left<<"ND5";
    R << setw(4)<<left<<"Egzaminas";
    R << "\n";
    for (int i = 0; i < n; i++) 
	R << setw(10)<<left<<A[i]<<setw(15)<<left<< B[i] << setw(4) << C[i] << setw(4) << D[i] << setw(4) << E[i] << setw(4) << F[i] << setw(4) << G[i] << setw(4) << H[i] <<endl;

    
    R << "\n\n";                      // Ekstra tuščia eilutė, kad vizualiai atrodytu graziau.
    R << "NB! Ka tik irasyti nauji studentu rezultatai. \n" << endl;
    R <<setw(21)<<left<<"Vardas";
    R <<setw(21)<<left<<"Pavardė";
    R <<setw(18)<<left<<"Galutinis(vid.)";
    R <<left<<"Galutinis(med.)\n";
    R <<"------------------------------------------------------------------------------\n";
    for (int i=0; i<stud_k; i++)
    {
        R <<setw(21)<<left<<mas[i].Vard;
        R <<setw(21)<<left<<mas[i].Pav;
        R <<setw(18)<<left<<mas[i].Galut;
        R <<setw(18)<<left<<mas[i].paz;
        //mediana(mas[i].paz)= int med;             //KM  
        //R <<setw(18)<<left<<med;  
      R << " \n";
    }
}

/*double findMedian(int pazymiai[], int i){
  double medianaa;
  std::sort(pazymiai,pazymiai + i);
  medianaa = pazymiai[(i/2)];
  if (i%2==0) {
    medianaa = (medianaa + pazymiai[i/2-1])/2;

    return medianaa;
    }}
*/
int main()
{
try { 

    int *dim; 
    int stud_k;
    char vedimas;
    
    string A[100], B[100];
	double  vid; 
	int n, C[100], D[100], E[100], F[100], G[100], H[100], max, maxv; 

    //Tikrina ar yra duomenu failiukas...
    FILE *file;
    if (file = fopen("data_kursiokai.txt", "r")) {
               fclose(file);
             //  cout<<"file exists";
    }
    else { 
    
        throw 1;
    }


    //Kilpa, kuri neleis įvesti netinkamą studentų skaičių
    do {
        cout<<"Įveskite studentų kiekį (nuo 1 iki 30):\n";
        cin>>stud_k;                               //Įvedamas studentų kiekis
    }   while (int(stud_k)<1 || int(stud_k)>30);   //Studentų negali būti daugiau nei 30
        irasas mas[25];
        dim=new int[stud_k];
        //mas.reserve(stud_k);


    do {
        cout<<"Ar norite, kad studentų pažymiai būtų suvesti automatiškai? Jei taip rašykite 'T'. Jei ne rašykite 'N'\n";
      
        cin>>vedimas; //Įrašome T arba N
        if (vedimas!='T' && vedimas!='N') { cout<<"Įveskite iš naujo\n"; } //Jei įvestas simbolis nebuvo T arba N, tada vedame iš naujo, kol įvesime teisingai
    } while (vedimas!='T' && vedimas!='N');                                //Ciklas kai įvedėme teisingai
    
    
    //For ciklas su indeksu i, kuris yra mežesnis už įvestų studentų kiekį, jog žinotume kiek kartų prašyti vardo įvedimo ir t.t
    for (int i=0; i<stud_k; i++)               
    {
        vard_ived(mas, i);
        if (vedimas=='N') {ivedimas(mas, i);} //Jei pasirinkome duomenis suvesti pačiam, tai kviečiama void funkcija
        else {auto_ived_paz(mas,i,6);}        //Jei pasirinkome kad duomenys būtų suvesti automatiškai
    }
    

    Skaityti(A, B, C, D, E, F, G, H, n);                  //nuskaityti duomenis is failo "data_kursiokai.txt"
   // Rikiuoti(A, B, C, D, E, F, G, H, n);
    atspausdinti(mas, stud_k, A, B, C, D, E, F, G, H, n); //Rezultatų atspausdinimas (void funkcijos)
    delete[] dim;
    dim=0;
    return 0;

    
  }     
  catch (int e) {
 
    cout << "NB!  Truksta duomenu failo.";
  }    
   
}
